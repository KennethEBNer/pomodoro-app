{"version":3,"sources":["components/BreakInterval.js","components/SessionLength.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","id","className","disabled","isPlay","onClick","breakInterval","decreaseBreak","class","increaseBreak","SessionLength","sessionLength","decreaseSession","increaseSession","Timer","state","isSession","timerSecond","intervalId","play","bind","stop","reset","decreaseTimer","setInterval","this","playStopTimer","setState","clearInterval","resetTimer","Audio","timerMinute","playSound","toggleInterval","updateTimerMinute","prevState","React","Component","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onUpdateTimerMinute","onToggleInterval","onResetTimer","onPlayStopTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8eb48340.chunk.js","sourcesContent":["import React from 'react';\n\nfunction BreakInterval(props) {\n\n    function decreaseCounter(){\n        if (props.breakInterval === 1){\n            return;\n        }\n        props.decreaseBreak();\n    }\n\n    function increaseCounter(){\n        if(props.breakInterval === 60){\n            return;\n        }\n        props.increaseBreak();\n    }\n\n    return (\n        <section>\n            <h4 id=\"break-label\">Pause Lengde</h4>\n            <section className=\"interval-container\">\n                <button \n                    id=\"break-decrement\"\n                    disabled={props.isPlay === true ? \"disabled\" : \"\"}\n                    onClick = {decreaseCounter}><i class=\"fas fa-arrow-down\"></i>\n                </button>\n                <p id=\"break-length\" className=\"interval-length\">{props.breakInterval}</p>\n                <button \n                    id=\"break-increment\"\n                    disabled={props.isPlay === true ? \"disabled\" : \"\"}\n                    onClick = {increaseCounter}><i class=\"fas fa-arrow-up\"></i>\n                </button>\n            </section>\n        </section>\n    );\n}\n\nexport default BreakInterval;","import React from 'react';\n\nfunction SessionLength(props) {\n\n    function decreaseCounter(){\n        if(props.sessionLength === 1){\n            return;\n        }\n        props.decreaseSession();\n    }\n\n    function increaseCounter(){\n        if(props.sessionLength === 60){\n            return;\n        }\n        props.increaseSession();\n    }\n\n    return (\n        <section>\n            <h4 id=\"session-label\">Arbeid Lengde</h4>\n            <section className=\"interval-container\">\n                <button\n                    id=\"session-decrement\"\n                    onClick={decreaseCounter}\n                    disabled={props.isPlay === true ? \"disabled\" : \"\"}><i class=\"fas fa-arrow-down\"></i>\n                </button>\n                <p id=\"session-length\" className=\"interval-length\">{props.sessionLength}</p>\n                <button\n                    id=\"session-increment\"\n                    onClick={increaseCounter}\n                    disabled={props.isPlay === true ? \"disabled\" : \"\"}><i class=\"fas fa-arrow-up\"></i>\n                </button>\n            </section>\n        </section>\n    );\n}\n\nexport default SessionLength;","import React from 'react';\n\nclass Timer extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            isSession: true,\n            timerSecond: 0,\n            intervalId: 0\n        };\n        this.play = this.play.bind(this);\n        this.stop = this.stop.bind(this);\n        this.reset = this.reset.bind(this);\n        this.decreaseTimer = this.decreaseTimer.bind(this);\n    }\n\n    play(){\n        let intervalId = setInterval(this.decreaseTimer, 1000);\n        this.props.playStopTimer(true);\n        this.setState({\n            intervalId: intervalId\n        });\n    }\n\n    stop(){\n        clearInterval(this.state.intervalId);\n        this.props.playStopTimer(false);\n    }\n\n    reset(){\n        this.stop();\n        this.props.resetTimer();\n        this.props.playStopTimer(false);\n        this.setState({\n            timerSecond: 0,\n            isSession: true\n        });\n    }\n\n    playSound () {\n      var audio = new Audio(\n        'https://media.geeksforgeeks.org/wp-content/uploads/20190531135120/beep.mp3');\n      audio.play();\n    }\n\n    decreaseTimer(){\n        switch (this.state.timerSecond){\n            case 0:\n                if(this.props.timerMinute === 0){\n                // When the timer reaches 00:00\n                  this.playSound();\n                    if(this.state.isSession){\n                        // If a session just ended, set isSession to false\n                        this.setState({\n                            isSession: false\n                        });\n                        // Call a function that toggles the isSession state in App\n                        this.props.toggleInterval(this.state.isSession);\n                    } else {\n                        // If a break just ended, set isSession to true\n                        this.setState({\n                            isSession: true\n                        });\n                        // Call a function that toggles the isSession state in App\n                        this.props.toggleInterval(this.state.isSession);\n                    }\n                } else {\n                // When the seconds on the timer reach 00    \n                    this.props.updateTimerMinute();\n                    this.setState({\n                        timerSecond: 59\n                    });\n                }\n                break;\n            default:\n                // If neither has reached 00, reduce the seconds by 1 every 1000 ms\n                this.setState((prevState) => {\n                    return {\n                        timerSecond: prevState.timerSecond - 1\n                    }\n                });\n                break;\n        }\n    }\n\n    render(){\n        return (\n            <section className=\"timer-section\">\n                <section className=\"timer-container\">\n                    <h4 id=\"timer-label\">{this.state.isSession === true ? \"Arbeid\" : \"Pause\" }</h4>\n                    <div id=\"time-left\">\n                      <span className=\"timer\">{this.props.timerMinute}</span>\n                      <span className=\"timer\">:</span>\n                      <span className=\"timer\">\n                          {this.state.timerSecond === 0\n                              ? \"00\"\n                              : this.state.timerSecond < 10\n                              ? \"0\" + this.state.timerSecond\n                              : this.state.timerSecond}\n                      </span>\n                    </div>\n                </section>\n                <section className=\"actions-container\">\n                    <button id=\"start\" onClick={this.play} className=\"timer-actions timer-action-play\">Start</button>\n                    <button id=\"stop\" onClick={this.stop} className=\"timer-actions timer-action-stop\">Stopp</button>\n                    <button id=\"reset\" onClick={this.reset} className=\"timer-actions timer-action-refresh\">Oppdater</button>\n                </section>\n            </section>\n        );\n    }\n}\n\nexport default Timer;","import React from 'react';\nimport '../App.css';\nimport BreakInterval from './BreakInterval';\nimport SessionLength from './SessionLength';\nimport Timer from './Timer';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25,\n      isPlay: false\n    };\n\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n    this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind(this);\n    this.onToggleInterval = this.onToggleInterval.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n    this.onPlayStopTimer = this.onPlayStopTimer.bind(this);\n  }\n\n  onIncreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength + 1\n      }\n    });\n  }\n\n  onDecreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength - 1\n      }\n    });\n  }\n\n  onIncreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.sessionLength + 1\n      }\n    });\n  }\n\n  onDecreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.sessionLength - 1\n      }\n    });\n  }\n\n  onUpdateTimerMinute() {\n    this.setState((prevState) => {\n      return {\n        timerMinute: prevState.timerMinute - 1\n      }\n    });\n  }\n\n  onToggleInterval(isSession) {\n\n    if (isSession) {\n      this.setState({\n        timerMinute: this.state.sessionLength\n      });\n    } else {\n      this.setState({\n        timerMinute: this.state.breakLength\n      });\n    }\n  }\n\n  onResetTimer() {\n    this.setState({\n      timerMinute: this.state.sessionLength\n    });\n  }\n\n  onPlayStopTimer(isPlay) {\n    this.setState({\n      isPlay: isPlay\n    });\n  }\n\n  render() {\n    return (\n      <main>\n        <h2>Pomodoro Klokke</h2>\n        <p className=\"text\">Pomodoro-teknikken ble utviklet i 1992 av Francesco Cirillo som ville gjøre tiden brukt på studier \n          mer effektiv. Den tradisjonelle pomodoro-teknikken innebærer et intenst fokus\n          på en oppgave i perioder på 25 minutter med 5 minutters pauser. Denne appen\n          gir deg frihet til å velge egne tidsperioder ut fra hva som passer deg best.</p>\n        <section className=\"both-intervals-container\">\n          <SessionLength\n            isPlay={this.state.isPlay}\n            sessionLength={this.state.sessionLength}\n            increaseSession={this.onIncreaseSessionLength}\n            decreaseSession={this.onDecreaseSessionLength} />\n          <BreakInterval\n            isPlay={this.state.isPlay}\n            breakInterval={this.state.breakLength}\n            increaseBreak={this.onIncreaseBreakLength}\n            decreaseBreak={this.onDecreaseBreakLength} />\n        </section>\n        <Timer\n          timerMinute={this.state.timerMinute}\n          breakLength={this.state.breakLength}\n          updateTimerMinute={this.onUpdateTimerMinute}\n          toggleInterval={this.onToggleInterval}\n          resetTimer={this.onResetTimer}\n          playStopTimer={this.onPlayStopTimer} />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}