{"version":3,"sources":["components/BreakInterval.js","components/SessionLength.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","className","id","disabled","isPlay","onClick","breakInterval","increaseBreak","decreaseBreak","SessionLength","sessionLength","increaseSession","decreaseSession","Timer","state","isSession","timerSecond","intervalId","play","bind","stop","reset","decreaseTimer","setInterval","this","playStopTimer","setState","playButton","document","body","querySelector","stopButton","classList","toggle","clearInterval","resetTimer","contains","Audio","timerMinute","playSound","toggleInterval","updateTimerMinute","prevState","React","Component","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onUpdateTimerMinute","onToggleInterval","onResetTimer","onPlayStopTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64c68aa1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction BreakInterval(props) {\n\n  function decreaseCounter() {\n    if (props.breakInterval === 1) {\n      return;\n    }\n    props.decreaseBreak();\n  }\n\n  function increaseCounter() {\n    if (props.breakInterval === 60) {\n      return;\n    }\n    props.increaseBreak();\n  }\n\n  return (\n    <section>\n      <h4 className=\"timer-labels\" id=\"break-label\">Pause Lengde</h4>\n      <section className=\"interval-container\">\n        <button\n          id=\"break-increment\"\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\n          onClick={increaseCounter}><i className=\"fas fa-arrow-up\"></i>\n        </button>\n        <p id=\"break-length\" className=\"interval-length\">{props.breakInterval}</p>\n        <button\n          id=\"break-decrement\"\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}\n          onClick={decreaseCounter}><i className=\"fas fa-arrow-down\"></i>\n        </button>\n      </section>\n    </section>\n  );\n}\n\nexport default BreakInterval;","import React from 'react';\n\nfunction SessionLength(props) {\n\n  function decreaseCounter() {\n    if (props.sessionLength === 1) {\n      return;\n    }\n    props.decreaseSession();\n  }\n\n  function increaseCounter() {\n    if (props.sessionLength === 60) {\n      return;\n    }\n    props.increaseSession();\n  }\n\n  return (\n    <section>\n      <h4 className=\"timer-labels\" id=\"session-label\">Arbeid Lengde</h4>\n      <section className=\"interval-container\">\n        <button\n          id=\"session-increment\"\n          onClick={increaseCounter}\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}><i className=\"fas fa-arrow-up\"></i>\n        </button>\n        <p id=\"session-length\" className=\"interval-length\">{props.sessionLength}</p>\n        <button\n          id=\"session-decrement\"\n          onClick={decreaseCounter}\n          disabled={props.isPlay === true ? \"disabled\" : \"\"}><i className=\"fas fa-arrow-down\"></i>\n        </button>\n      </section>\n    </section>\n  );\n}\n\nexport default SessionLength;","import React from 'react';\n\nclass Timer extends React.Component {\n  constructor(){\n      super();\n      this.state = {\n          isSession: true,\n          timerSecond: 0,\n          intervalId: 0\n      };\n      this.play = this.play.bind(this);\n      this.stop = this.stop.bind(this);\n      this.reset = this.reset.bind(this);\n      this.decreaseTimer = this.decreaseTimer.bind(this);\n  }\n\n  play(){\n      let intervalId = setInterval(this.decreaseTimer, 1000);\n      this.props.playStopTimer(true);\n      this.setState({\n          intervalId: intervalId\n      });\n      let playButton = document.body.querySelector('.timer-action-play');\n      let stopButton = document.body.querySelector('.timer-action-stop');\n      playButton.classList.toggle('d-none-button');\n      stopButton.classList.toggle('d-none-button');\n  }\n\n  stop(){\n      clearInterval(this.state.intervalId);\n      this.props.playStopTimer(false);\n      let playButton = document.body.querySelector('.timer-action-play');\n      let stopButton = document.body.querySelector('.timer-action-stop');\n      playButton.classList.toggle('d-none-button');\n      stopButton.classList.toggle('d-none-button');\n  }\n\n  reset(){\n      clearInterval(this.state.intervalId);\n      this.props.playStopTimer(false);\n      this.props.resetTimer();\n      this.props.playStopTimer(false);\n\n      let playButton = document.body.querySelector('.timer-action-play');\n      let stopButton = document.body.querySelector('.timer-action-stop');\n      if(playButton.classList.contains('d-none-button')) {\n        playButton.classList.toggle('d-none-button');\n        stopButton.classList.toggle('d-none-button');\n      }\n      this.setState({\n          timerSecond: 0,\n          isSession: true\n      });\n  }\n\n  playSound () {\n    var audio = new Audio(\n      'https://media.geeksforgeeks.org/wp-content/uploads/20190531135120/beep.mp3');\n    audio.play();\n  }\n\n  decreaseTimer(){\n      switch (this.state.timerSecond){\n          case 0:\n              if(this.props.timerMinute === 0){\n              // When the timer reaches 00:00\n                this.playSound();\n                  if(this.state.isSession){\n                      // If a session just ended, set isSession to false\n                      this.setState({\n                          isSession: false\n                      });\n                      // Call a function that toggles the isSession state in App\n                      this.props.toggleInterval(this.state.isSession);\n                  } else {\n                      // If a break just ended, set isSession to true\n                      this.setState({\n                          isSession: true\n                      });\n                      // Call a function that toggles the isSession state in App\n                      this.props.toggleInterval(this.state.isSession);\n                  }\n              } else {\n              // When the seconds on the timer reach 00    \n                  this.props.updateTimerMinute();\n                  this.setState({\n                      timerSecond: 59\n                  });\n              }\n              break;\n          default:\n              // If neither has reached 00, reduce the seconds by 1 every 1000 ms\n              this.setState((prevState) => {\n                  return {\n                      timerSecond: prevState.timerSecond - 1\n                  }\n              });\n              break;\n      }\n  }\n\n  render() {\n    return (\n      <div className=\"main-timer-container\">\n        <div className=\"timer-section\">\n          <section className=\"timer-container\">\n            <h4 id=\"timer-label\">{this.state.isSession === true ? \"Arbeid\" : \"Pause\"}</h4>\n            <div id=\"time-left\">\n              <span className=\"timer\">{this.props.timerMinute}</span>\n              <span className=\"timer\">:</span>\n              <span className=\"timer\">\n                {this.state.timerSecond === 0\n                  ? \"00\"\n                  : this.state.timerSecond < 10\n                    ? \"0\" + this.state.timerSecond\n                    : this.state.timerSecond}\n              </span>\n            </div>\n          </section>\n        </div>\n        <div>\n          <section className=\"actions-container\">\n            <button id=\"start\" onClick={this.play} className=\"timer-actions timer-action-play\">Start</button>\n            <button id=\"stop\" onClick={this.stop} className=\"timer-actions timer-action-stop d-none-button\">Stopp</button>\n            <button id=\"reset\" onClick={this.reset} className=\"timer-actions timer-action-refresh\">Nullstill</button>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;","import React from 'react';\nimport '../App.css';\nimport BreakInterval from './BreakInterval';\nimport SessionLength from './SessionLength';\nimport Timer from './Timer';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25,\n      isPlay: false\n    };\n\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n    this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind(this);\n    this.onToggleInterval = this.onToggleInterval.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n    this.onPlayStopTimer = this.onPlayStopTimer.bind(this);\n  }\n\n  onIncreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength + 1\n      }\n    });\n  }\n\n  onDecreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength - 1\n      }\n    });\n  }\n\n  onIncreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.sessionLength + 1\n      }\n    });\n  }\n\n  onDecreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.sessionLength - 1\n      }\n    });\n  }\n\n  onUpdateTimerMinute() {\n    this.setState((prevState) => {\n      return {\n        timerMinute: prevState.timerMinute - 1\n      }\n    });\n  }\n\n  onToggleInterval(isSession) {\n\n    if (isSession) {\n      this.setState({\n        timerMinute: this.state.sessionLength\n      });\n    } else {\n      this.setState({\n        timerMinute: this.state.breakLength\n      });\n    }\n  }\n\n  onResetTimer() {\n    this.setState({\n      timerMinute: this.state.sessionLength\n    });\n  }\n\n  onPlayStopTimer(isPlay) {\n    this.setState({\n      isPlay: isPlay\n    });\n  }\n\n  render() {\n    return (\n      <main>\n        <h2>Pomodoro Klokke</h2>\n        <p className=\"text\">Den tradisjonelle pomodoro-teknikken innebærer fokuserte arbeidsperioder på 25 minutter med 5 minutters pauser i mellom.\n         Denne appen gir deg frihet til å velge egne tidsperioder ut fra hva som passer deg best.</p>\n        <div className=\"main-container\">\n          <SessionLength\n            isPlay={this.state.isPlay}\n            sessionLength={this.state.sessionLength}\n            increaseSession={this.onIncreaseSessionLength}\n            decreaseSession={this.onDecreaseSessionLength} />\n          <Timer\n            timerMinute={this.state.timerMinute}\n            breakLength={this.state.breakLength}\n            updateTimerMinute={this.onUpdateTimerMinute}\n            toggleInterval={this.onToggleInterval}\n            resetTimer={this.onResetTimer}\n            playStopTimer={this.onPlayStopTimer} />\n          <section>\n            <BreakInterval\n              isPlay={this.state.isPlay}\n              breakInterval={this.state.breakLength}\n              increaseBreak={this.onIncreaseBreakLength}\n              decreaseBreak={this.onDecreaseBreakLength} />\n          </section>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}